{"ast":null,"code":"export const getEmptyBoard = () => [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\nconst hasValue = (board, value) => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === value) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport const isFull = board => {\n  return !hasValue(board, 0);\n};\n\nconst getRandomPosition = () => {\n  const rowPosition = Math.floor(Math.random() * 4);\n  const colPosition = Math.floor(Math.random() * 4);\n  return [rowPosition, colPosition];\n};\n\nexport const generateRandom = board => {\n  if (isFull(board)) {\n    return board;\n  }\n\n  let [row, col] = getRandomPosition();\n\n  while (board[row][col] !== 0) {\n    [row, col] = getRandomPosition();\n  }\n\n  board[row][col] = 2;\n  return board;\n};\n\nconst compress = board => {\n  const newBoard = getEmptyBoard();\n\n  for (let i = 0; i < board.length; i++) {\n    let colIndex = 0;\n\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] !== 0) {\n        newBoard[i][colIndex] = board[i][j];\n        colIndex++;\n      }\n    }\n  }\n\n  return newBoard;\n};\n\nconst merge = board => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length - 1; j++) {\n      if (board[i][j] !== 0 && board[i][j] === board[i][j + 1]) {\n        board[i][j] = board[i][j] * 2;\n        board[i][j + 1] = 0;\n      }\n    }\n  }\n\n  return board;\n};\n\nexport const moveLeft = board => {\n  const newBoard1 = compress(board);\n  const newBoard2 = merge(newBoard1);\n  return compress(newBoard2);\n};\n\nconst reverse = board => {\n  const reverseBoard = getEmptyBoard();\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      reverseBoard[i][j] = board[i][board[i].length - 1 - j];\n    }\n  }\n\n  return reverseBoard;\n};\n\nexport const moveRight = board => {\n  const reversedBoard = reverse(board);\n  const newBoard = moveLeft(reversedBoard);\n  return reverse(newBoard);\n};\n\nconst rotateLeft = board => {\n  const rotateBoard = getEmptyBoard();\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      rotateBoard[i][j] = board[j][board[i].length - 1 - i];\n    }\n  }\n\n  return rotateBoard;\n};\n\nconst rotateRight = board => {\n  const rotateBoard = getEmptyBoard();\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      rotateBoard[i][j] = board[board[i].length - 1 - j][i];\n    }\n  }\n\n  return rotateBoard;\n};\n\nexport const moveUp = board => {\n  const rotateBoard = rotateLeft(board);\n  const newBoard = moveLeft(rotateBoard);\n  return rotateRight(newBoard);\n};\nexport const moveDown = board => {\n  const rotateBoard = rotateRight(board);\n  const newBoard = moveLeft(rotateBoard);\n  return rotateLeft(newBoard);\n};\nexport const checkWin = board => {\n  return hasValue(board, 2048);\n};\n\nconst hasDiff = (board, updatedBoard) => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] !== updatedBoard[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport const isOver = board => {\n  if (hasDiff(board, moveLeft(board))) {\n    return false;\n  }\n\n  if (hasDiff(board, moveRight(board))) {\n    return false;\n  }\n\n  if (hasDiff(board, moveUp(board))) {\n    return false;\n  }\n\n  if (hasDiff(board, moveDown(board))) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/tech16/CodeInformatiqueXD/2048_react/2048_game/src/GameBoard.js"],"names":["getEmptyBoard","hasValue","board","value","i","length","j","isFull","getRandomPosition","rowPosition","Math","floor","random","colPosition","generateRandom","row","col","compress","newBoard","colIndex","merge","moveLeft","newBoard1","newBoard2","reverse","reverseBoard","moveRight","reversedBoard","rotateLeft","rotateBoard","rotateRight","moveUp","moveDown","checkWin","hasDiff","updatedBoard","isOver"],"mappings":"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","sourcesContent":["export const getEmptyBoard = () => [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n  ];\n  \n  const hasValue = (board, value) => {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j] === value) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  \n  export const isFull = (board) => {\n    return !hasValue(board, 0);\n  };\n  \n  const getRandomPosition = () => {\n    const rowPosition = Math.floor(Math.random() * 4);\n    const colPosition = Math.floor(Math.random() * 4);\n    return [rowPosition, colPosition];\n  };\n  \n  export const generateRandom = (board) => {\n    if (isFull(board)) {\n      return board;\n    }\n  \n    let [row, col] = getRandomPosition();\n    while (board[row][col] !== 0) {\n      [row, col] = getRandomPosition();\n    }\n  \n    board[row][col] = 2;\n    return board;\n  };\n  \n  const compress = (board) => {\n    const newBoard = getEmptyBoard();\n    for (let i = 0; i < board.length; i++) {\n      let colIndex = 0;\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j] !== 0) {\n          newBoard[i][colIndex] = board[i][j];\n          colIndex++;\n        }\n      }\n    }\n    return newBoard;\n  };\n  \n  const merge = (board) => {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length - 1; j++) {\n        if (board[i][j] !== 0 && board[i][j] === board[i][j + 1]) {\n          board[i][j] = board[i][j] * 2;\n          board[i][j + 1] = 0;\n        }\n      }\n    }\n  \n    return board;\n  };\n  \n  export const moveLeft = (board) => {\n    const newBoard1 = compress(board);\n    const newBoard2 = merge(newBoard1);\n    return compress(newBoard2);\n  };\n  \n  const reverse = (board) => {\n    const reverseBoard = getEmptyBoard();\n  \n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        reverseBoard[i][j] = board[i][board[i].length - 1 - j];\n      }\n    }\n  \n    return reverseBoard;\n  };\n  \n  export const moveRight = (board) => {\n    const reversedBoard = reverse(board);\n    const newBoard = moveLeft(reversedBoard);\n    return reverse(newBoard);\n  };\n  \n  const rotateLeft = (board) => {\n    const rotateBoard = getEmptyBoard();\n  \n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        rotateBoard[i][j] = board[j][board[i].length - 1 - i];\n      }\n    }\n  \n    return rotateBoard;\n  };\n  \n  const rotateRight = (board) => {\n    const rotateBoard = getEmptyBoard();\n  \n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        rotateBoard[i][j] = board[board[i].length - 1 - j][i];\n      }\n    }\n  \n    return rotateBoard;\n  };\n  \n  export const moveUp = (board) => {\n    const rotateBoard = rotateLeft(board);\n    const newBoard = moveLeft(rotateBoard);\n    return rotateRight(newBoard);\n  };\n  \n  export const moveDown = (board) => {\n    const rotateBoard = rotateRight(board);\n    const newBoard = moveLeft(rotateBoard);\n    return rotateLeft(newBoard);\n  };\n  \n  export const checkWin = (board) => {\n    return hasValue(board, 2048);\n  };\n  \n  const hasDiff = (board, updatedBoard) => {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j] !== updatedBoard[i][j]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  \n  export const isOver = (board) => {\n    if (hasDiff(board, moveLeft(board))) {\n      return false;\n    }\n    if (hasDiff(board, moveRight(board))) {\n      return false;\n    }\n    if (hasDiff(board, moveUp(board))) {\n      return false;\n    }\n    if (hasDiff(board, moveDown(board))) {\n      return false;\n    }\n    return true;\n  };"]},"metadata":{},"sourceType":"module"}