{"ast":null,"code":"import React, { useState } from \"react\";\nimport \"App.css\";\nexport const getEmptyBoard = () => [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\nconst hasValue = (board, value) => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === value) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport const isFull = board => {\n  return !hasValue(board, 0);\n};\n\nconst getRandomPosition = () => {\n  const rowPosition = Math.floor(Math.random() * 4);\n  const colPosition = Math.floor(Math.random() * 4);\n  return [rowPosition, colPosition];\n};\n\nexport const generateRandom = board => {\n  if (isFull(board)) {\n    return board;\n  }\n\n  let [row, col] = getRandomPosition();\n\n  while (board[row][col] !== 0) {\n    [row][col] = getRandomPosition();\n  }\n\n  board[row][col] = 2;\n  return board;\n};\n\nconst compress = board => {\n  const newBoard = getEmptyBoard();\n\n  for (let i = 0; i < board.length; i++) {\n    let colIndex = 0;\n\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] !== 0) {\n        newBoard[i][colIndex] = board[i][j];\n        colIndex++;\n      }\n    }\n  }\n\n  return newBoard;\n};\n\nconst merge = board => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length - 1; j++) {\n      if (board[i][j] !== 0 && board[i][j] === board[i][j + 1]) {\n        board[i][j] = board[i][j] * 2;\n        board[i][j + 1] = 0;\n      }\n    }\n  }\n\n  return board;\n};\n\nexport const moveLeft = board => {\n  const newBoard1 = compress(board);\n  const newBoard2 = merge(newBoard1);\n  return compress(newBoard2);\n};\n\nconst reverse = board => {\n  const reverseBoard = getEmptyBoard();\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      reverseBoard[i][j] = board[i][board[i].length - 1 - j];\n    }\n  }\n\n  return reverseBoard;\n};\n\nexport const moveRight = board => {\n  const reverseBoard = reverse(board);\n  const newBoard = moveLeft(reverseBoard);\n  return reverse(newBoard);\n};\n\nconst rotateLeft = board => {\n  const rotateBoard = getEmptyBoard();\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      rotateBoard[i][j] = board[j][board[i].length - 1 - i];\n    }\n  }\n\n  return rotateBoard;\n};\n\nconst rotateRight = board => {\n  const rotateBoard = getEmptyBoard();\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      rotateBoard[i][j] = board[board[i].length - 1 - j][i];\n    }\n  }\n\n  return rotateBoard;\n};\n\nexport const moveUp = board => {\n  const rotateBoard = rotateLeft(board);\n  const newBoard = moveLeft(rotateBoard);\n  return rotateRight(newBoard);\n};\nexport const moveDown = () => {\n  const rotateBoard = rotateRight(board);\n  const newBoard = moveLeft(rotateBoard);\n  return rotateLeft(newBoard);\n};\nexport const checkWin = board => {\n  return hasValue(board, 2048);\n};\n\nconst hasDiff = (board, updateBoard) => {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] !== updateBoard[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport const isOver = board => {\n  if (hasDiff(board, moveLeft(board))) {\n    return false;\n  }\n\n  if (hasDiff(board, moveRight(board))) {\n    return false;\n  }\n\n  if (hasDiff(board, moveUp(board))) {\n    return false;\n  }\n\n  if (hasDiff(board, moveDown(board))) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/tech16/CodeInformatiqueXD/2048_react/2048_game/src/App.js"],"names":["React","useState","getEmptyBoard","hasValue","board","value","i","length","j","isFull","getRandomPosition","rowPosition","Math","floor","random","colPosition","generateRandom","row","col","compress","newBoard","colIndex","merge","moveLeft","newBoard1","newBoard2","reverse","reverseBoard","moveRight","rotateLeft","rotateBoard","rotateRight","moveUp","moveDown","checkWin","hasDiff","updateBoard","isOver"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"App.css\";\n\nexport const getEmptyBoard = () => [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0]\n];\n\nconst hasValue = (board, value) => {\n  for(let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] === value) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isFull = (board) => {\n  return !hasValue(board, 0);\n};\n\nconst getRandomPosition = () => {\n  const rowPosition = Math.floor(Math.random() * 4);\n  const colPosition = Math.floor(Math.random() * 4);\n  return [rowPosition, colPosition];\n};\n\nexport const generateRandom = (board) => {\n  if (isFull(board)) {\n    return board;\n  }\n\n  let [row, col] = getRandomPosition();\n  while (board[row][col] !== 0) {\n    [row][col] = getRandomPosition();\n  }\n\n  board[row][col] = 2;\n  return board;\n};\n\nconst compress = (board) => {\n  const newBoard = getEmptyBoard();\n  for(let i = 0; i < board.length; i++) {\n    let colIndex = 0;\n    for (let j = 0; j < board[i].length; j++) {\n      if (board[i][j] !== 0) {\n        newBoard[i][colIndex] = board[i][j];\n        colIndex++;\n      }\n    }\n  }\n  return newBoard;\n}\n\nconst merge = (board) => {\n  for(let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length - 1; j++) {\n      if (board[i][j] !== 0 && board[i][j] === board[i][j + 1]) {\n        board[i][j] = board[i][j] * 2;\n        board[i][j + 1] = 0;\n      }\n    }\n  }\n  return board;\n};\n\nexport const moveLeft = (board) => {\n  const newBoard1 = compress(board);\n  const newBoard2 = merge(newBoard1);\n  return compress(newBoard2);\n};\n\nconst reverse = (board) => {\n  const reverseBoard = getEmptyBoard();\n\n  for (let i = 0; i < board.length; i++) {\n    for(let j = 0; j < board[i].length; j++) {\n      reverseBoard[i][j] = board[i][board[i].length - 1 - j];\n    }\n  }\n  return reverseBoard;\n};\n\nexport const moveRight = (board) => {\n  const reverseBoard = reverse(board);\n  const newBoard = moveLeft(reverseBoard);\n  return reverse(newBoard);\n};\n\nconst rotateLeft = (board) => {\n  const rotateBoard = getEmptyBoard();\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      rotateBoard[i][j] = board[j][board[i].length - 1 - i];\n    }\n  }\n\n  return rotateBoard;\n};\n\nconst rotateRight = (board) => {\n  const rotateBoard = getEmptyBoard();\n\n  for (let i = 0; i < board.length; i++) {\n    for(let j = 0; j < board[i].length; j++) {\n      rotateBoard[i][j] = board[board[i].length - 1 - j][i];\n    }\n  }\n  return rotateBoard;\n};\n\nexport const moveUp = (board) => {\n  const rotateBoard = rotateLeft(board);\n  const newBoard = moveLeft(rotateBoard);\n  return rotateRight(newBoard);\n};\n\nexport const moveDown = () => {\n  const rotateBoard = rotateRight(board);\n  const newBoard = moveLeft(rotateBoard);\n  return rotateLeft(newBoard);\n};\n\nexport const checkWin = (board) => {\n  return hasValue(board, 2048)\n}\n\nconst hasDiff = (board, updateBoard) => {\n  for (let i = 0; i < board.length; i++) {\n    for(let j = 0; j < board[i].length; j++) {\n      if (board[i][j] !== updateBoard[i][j]) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isOver = (board) => {\n  if (hasDiff(board, moveLeft(board))) {\n    return false;\n  }\n  if (hasDiff(board, moveRight(board))) {\n    return false;\n  }\n  if (hasDiff(board, moveUp(board))) {\n    return false;\n  }\n  if (hasDiff(board, moveDown(board))) {\n    return false;\n  }\n  return true;\n};"]},"metadata":{},"sourceType":"module"}